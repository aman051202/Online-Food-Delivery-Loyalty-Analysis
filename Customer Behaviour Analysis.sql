CREATE DATABASE CustomerBehaviorAnalysis;

USE CustomerBehaviorAnalysis;

CREATE TABLE Sales1 (
    userid INT,
    created_date DATE,
    product_id INT
);

CREATE TABLE Product1 (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price INT
);

CREATE TABLE Username (
    userid INT PRIMARY KEY,
    Names VARCHAR(100)
);

CREATE TABLE Users (
    userid INT PRIMARY KEY,
    signup_date DATE
);

CREATE TABLE Goldusers_Signup (
    userid INT PRIMARY KEY,
    gold_signup_date DATE
);

INSERT INTO Sales1 (userid, created_date, product_id) VALUES
(1, '2017-04-19', 2),
(3, '2019-12-18', 1),
(2, '2020-07-20', 3),
(1, '2019-10-23', 2),
(1, '2018-03-19', 3),
(3, '2016-12-20', 2),
(1, '2016-11-09', 1),
(1, '2016-05-20', 3),
(2, '2017-09-24', 1),
(1, '2017-03-11', 2),
(1, '2016-03-11', 1),
(3, '2016-11-10', 1),
(3, '2017-12-07', 2),
(3, '2016-12-15', 2),
(2, '2017-11-08', 2),
(2, '2018-09-10', 3),
(4, '2019-05-01', 1),
(5, '2018-11-23', 3),
(6, '2017-06-30', 9),
(7, '2018-08-12', 8),
(8, '2019-03-19', 7),
(9, '2017-12-04', 6),
(10, '2018-09-22', 2),
(4, '2020-08-17', 1),
(5, '2017-05-12', 10),
(6, '2014-01-27', 11),
(7, '2014-04-02', 7),
(8, '2020-12-15', 8),
(9, '2017-09-08', 8);

INSERT INTO Product1 (product_id, product_name, price) VALUES
(1, 'Dal Makani', 160),
(2, 'Shahi Paneer', 170),
(3, 'Butter Chicken', 340),
(4, 'Aloo Gobi', 150),
(5, 'Chole Bhature', 100),
(6, 'Fish Curry', 380),
(7, 'Chicken Tikka', 300),
(8, 'Mutton Biryani', 450),
(9, 'Veg Pulao', 200),
(10, 'Mango Lassi', 80),
(11, 'Gulab Jamun', 100);

INSERT INTO Username (userid, Names) VALUES
(1, 'Anshul'),
(2, 'Rohan'),
(3, 'Shreya'),
(4, 'Priya'),
(5, 'Aryan'),
(6, 'Sara'),
(7, 'Sahil'),
(8, 'Tanvi'),
(9, 'Ritika'),
(10, 'Gaurav');

INSERT INTO Users (userid, signup_date) VALUES
(1, '2014-09-02'),
(2, '2015-01-15'),
(3, '2014-04-11'),
(4, '2015-11-17'),
(5, '2015-09-08'),
(6, '2014-07-13'),
(7, '2013-04-02'),
(8, '2013-12-15'),
(9, '2016-01-02'),
(10, '2016-01-02');

INSERT INTO Goldusers_Signup (userid, gold_signup_date) VALUES
(1, '2017-03-10'),
(3, '2018-07-15'),
(4, '2019-01-20'),
(5, '2018-11-23'),
(7, '2019-08-12');

-- Q1. What is the total sales revenue generated by each product?
SELECT 
    p.product_name,
    COUNT(s.product_id) AS total_sales,
    p.price,
    COUNT(s.product_id) * p.price AS total_revenue
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
GROUP BY p.product_name, p.price
ORDER BY total_revenue DESC;

-- Q2. Which 3 product has the highest sales revenue? 
SELECT TOP 3
    p.product_name,
    COUNT(s.product_id) AS total_sales,
    p.price,
    COUNT(s.product_id) * p.price AS total_revenue
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
GROUP BY p.product_name, p.price
ORDER BY total_revenue DESC;

-- Q3. How many users have signed up for the service and has taken the gold membership?
SELECT 
    (SELECT COUNT(*) FROM Users) AS total_signed_up_users,
    (SELECT COUNT(*) FROM Goldusers_Signup) AS total_gold_members;

    SELECT 
    ROUND(
        (SELECT COUNT(*) * 100.0 FROM Goldusers_Signup) / 
        (SELECT COUNT(*) FROM Users), 2
    ) AS gold_membership_percentage;

-- Q4. What is the revenue generated from gold users?
SELECT 
    SUM(p.price) AS total_gold_user_revenue
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
JOIN Goldusers_Signup g ON s.userid = g.userid;

-- What is the total revenue generated from gold users?
SELECT 
    SUM(p.price) AS total_revenue_from_gold_users
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
JOIN Goldusers_Signup g ON s.userid = g.userid;

-- Q6. Which users has been a gold user for the How much of time?
SELECT 
    u.userid,
    un.Names,
    g.gold_signup_date,
    DATEDIFF(DAY, g.gold_signup_date, GETDATE()) AS days_as_gold_member
FROM Goldusers_Signup g
JOIN Users u ON g.userid = u.userid
JOIN Username un ON u.userid = un.userid
ORDER BY days_as_gold_member DESC;

-- Q7. What is the most popular product among gold users?
SELECT 
    p.product_name,
    COUNT(*) AS times_ordered
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
JOIN Goldusers_Signup g ON s.userid = g.userid
GROUP BY p.product_name
ORDER BY times_ordered DESC;

-- Q8. What is the total sales revenue generated in each year?
SELECT 
    YEAR(s.created_date) AS sales_year,
    SUM(p.price) AS total_revenue
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
GROUP BY YEAR(s.created_date)
ORDER BY sales_year;

-- Q9. How has the sales revenue changed over the years?
WITH yearly_revenue AS (
    SELECT 
        YEAR(s.created_date) AS sales_year,
        SUM(p.price) AS total_revenue
    FROM Sales1 s
    JOIN Product1 p ON s.product_id = p.product_id
    GROUP BY YEAR(s.created_date)
),
revenue_with_change AS (
    SELECT 
        sales_year,
        total_revenue,
        LAG(total_revenue) OVER (ORDER BY sales_year) AS previous_year_revenue
    FROM yearly_revenue
)
SELECT 
    sales_year,
    total_revenue,
    previous_year_revenue,
    ROUND(
        CASE 
            WHEN previous_year_revenue IS NULL THEN NULL
            ELSE ((total_revenue - previous_year_revenue) * 100.0 / previous_year_revenue)
        END, 2
    ) AS percent_change
FROM revenue_with_change
ORDER BY sales_year;

-- Q10. What is the average Gold-signup compare to just sign up for the users?
SELECT 
    COUNT(*) AS total_signed_up_users,
    (SELECT COUNT(*) FROM Goldusers_Signup) AS total_gold_members,
    ROUND(
        (SELECT COUNT(*) * 100.0 FROM Goldusers_Signup) / COUNT(*), 2
    ) AS gold_membership_percentage
FROM Users;

-- Q11. How many gold members users have order how many numbers of time ?
SELECT 
    g.userid,
    un.Names,
    COUNT(*) AS total_orders
FROM Sales1 s
JOIN Goldusers_Signup g ON s.userid = g.userid
JOIN Username un ON g.userid = un.userid
GROUP BY g.userid, un.Names
ORDER BY total_orders DESC;

SELECT 
    g.userid,
    un.Names,
    SUM(CASE WHEN s.created_date < g.gold_signup_date THEN 1 ELSE 0 END) AS orders_before_gold,
    SUM(CASE WHEN s.created_date >= g.gold_signup_date THEN 1 ELSE 0 END) AS orders_after_gold
FROM Sales1 s
JOIN Goldusers_Signup g ON s.userid = g.userid
JOIN Username un ON g.userid = un.userid
GROUP BY g.userid, un.Names
ORDER BY orders_after_gold DESC;

-- Q12. What is the total amount each customer spend on Online Food Delivery?
SELECT 
    s.userid,
    un.Names,
    SUM(p.price) AS total_spent
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
JOIN Username un ON s.userid = un.userid
GROUP BY s.userid, un.Names
ORDER BY total_spent DESC;

--  Q13. What is the frequency of customer visits to the online platform ?
SELECT 
    s.userid,
    un.Names,
    COUNT(*) AS visit_count
FROM Sales1 s
JOIN Username un ON s.userid = un.userid
GROUP BY s.userid, un.Names
ORDER BY visit_count DESC;

-- Q14. What was the first order purchase by each customer ?
WITH first_orders AS (
    SELECT 
        s.userid,
        MIN(s.created_date) AS first_order_date
    FROM Sales1 s
    GROUP BY s.userid
)
SELECT 
    fo.userid,
    un.Names,
    fo.first_order_date,
    p.product_name,
    p.price
FROM first_orders fo
JOIN Sales1 s ON fo.userid = s.userid AND fo.first_order_date = s.created_date
JOIN Product1 p ON s.product_id = p.product_id
JOIN Username un ON s.userid = un.userid
ORDER BY fo.first_order_date;

-- Q15. What is the most purchase item on the menu and how many times was it purchased by all customers?
SELECT 
    p.product_name,
    COUNT(*) AS times_purchased
FROM Sales1 s
JOIN Product1 p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY times_purchased DESC;

--  Q16. Which item was most popular for each customer ?
WITH product_counts AS (
    SELECT 
        s.userid,
        un.Names,
        p.product_name,
        COUNT(*) AS order_count
    FROM Sales1 s
    JOIN Product1 p ON s.product_id = p.product_id
    JOIN Username un ON s.userid = un.userid
    GROUP BY s.userid, un.Names, p.product_name
),
ranked_products AS (
    SELECT *,
        RANK() OVER (PARTITION BY userid ORDER BY order_count DESC) AS rank
    FROM product_counts
)
SELECT 
    userid,
    Names,
    product_name AS most_popular_item,
    order_count
FROM ranked_products
WHERE rank = 1
ORDER BY userid;

-- Q17. Which item was purchase first by the customer after they become a member ?
WITH gold_sales AS (
    SELECT 
        s.userid,
        s.created_date,
        s.product_id,
        g.gold_signup_date
    FROM Sales1 s
    JOIN Goldusers_Signup g ON s.userid = g.userid
    WHERE s.created_date >= g.gold_signup_date
),
first_gold_purchase AS (
    SELECT 
        userid,
        MIN(created_date) AS first_purchase_date
    FROM gold_sales
    GROUP BY userid
)
SELECT 
    fgp.userid,
    un.Names,
    fgp.first_purchase_date,
    p.product_name,
    p.price
FROM first_gold_purchase fgp
JOIN Sales1 s ON fgp.userid = s.userid AND fgp.first_purchase_date = s.created_date
JOIN Product1 p ON s.product_id = p.product_id
JOIN Username un ON s.userid = un.userid
ORDER BY fgp.userid;

-- Q18.Which item was purchase before the customer become a member ?
WITH pre_gold_sales AS (
    SELECT 
        s.userid,
        s.created_date,
        s.product_id,
        g.gold_signup_date
    FROM Sales1 s
    JOIN Goldusers_Signup g ON s.userid = g.userid
    WHERE s.created_date < g.gold_signup_date
),
last_pre_gold_purchase AS (
    SELECT 
        userid,
        MAX(created_date) AS last_purchase_before_gold
    FROM pre_gold_sales
    GROUP BY userid
)
SELECT 
    lpg.userid,
    un.Names,
    lpg.last_purchase_before_gold,
    p.product_name,
    p.price
FROM last_pre_gold_purchase lpg
JOIN Sales1 s ON lpg.userid = s.userid AND lpg.last_purchase_before_gold = s.created_date
JOIN Product1 p ON s.product_id = p.product_id
JOIN Username un ON s.userid = un.userid
ORDER BY lpg.userid;

-- Q19. What is the total orders and amount spent for each member before they become a member ?
SELECT 
    g.userid,
    un.Names,
    COUNT(*) AS orders_before_gold,
    SUM(p.price) AS amount_spent_before_gold
FROM Sales1 s
JOIN Goldusers_Signup g ON s.userid = g.userid
JOIN Product1 p ON s.product_id = p.product_id
JOIN Username un ON s.userid = un.userid
WHERE s.created_date < g.gold_signup_date
GROUP BY g.userid, un.Names
ORDER BY amount_spent_before_gold DESC;

-- Q20. Rank all the transactions for each member whenever they are a XYZ gold member for every non gold member Transaction marks as na ?
WITH sales_with_gold_flag AS (
    SELECT 
        s.userid,
        un.Names,
        s.created_date,
        p.product_name,
        p.price,
        g.gold_signup_date,
        CASE 
            WHEN g.gold_signup_date IS NOT NULL AND s.created_date >= g.gold_signup_date THEN 1
            ELSE 0
        END AS is_gold_transaction
    FROM Sales1 s
    LEFT JOIN Goldusers_Signup g ON s.userid = g.userid
    JOIN Product1 p ON s.product_id = p.product_id
    JOIN Username un ON s.userid = un.userid
),
ranked_gold_sales AS (
    SELECT *,
        CASE 
            WHEN is_gold_transaction = 1 THEN 
                RANK() OVER (PARTITION BY userid ORDER BY created_date)
            ELSE NULL
        END AS gold_transaction_rank
    FROM sales_with_gold_flag
)
SELECT 
    userid,
    Names,
    created_date,
    product_name,
    price,
    CASE 
        WHEN gold_transaction_rank IS NULL THEN 'NA'
        ELSE CAST(gold_transaction_rank AS VARCHAR)
    END AS transaction_rank
FROM ranked_gold_sales
ORDER BY userid, created_date;
